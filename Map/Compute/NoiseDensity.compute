#pragma kernel Density
#include "/Includes/Density.compute"
#include "/Includes/Noise.compute"

// Noise settings
StructuredBuffer<float3> offsets;
int octaves;
float lacunarity;
float persistence;
float noiseScale;

[numthreads(numThreads, numThreads, numThreads)]
void Density(int3 id : SV_DispatchThreadID)
{
    if (id.x >= numVoxelsPerAxis || id.y >= numVoxelsPerAxis || id.z >= numVoxelsPerAxis) {
        return;
    }

    float3 pos = centre + id * spacing - boundsSize / 2;

    float noise = 0;

    float frequency = noiseScale / 100;
    float amplitude = 1;

    for (int i = 0; i < octaves; i++) {
        float n = snoise(pos * frequency + offsets[i] + offset);
        float v = (n + 1) / 2;
        noise += v * amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    int index = indexFromCoord(id.x, id.y, id.z);
    if (minDensity > noise) {
        return;
    }
    voxelIds[index] = 1;
}
